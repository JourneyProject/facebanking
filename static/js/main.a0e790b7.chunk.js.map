{"version":3,"sources":["images/super-tuesday.jpg","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","IS_FIREFOX_DESKTOP","test","navigator","userAgent","App","useState","copied","setCopied","message","className","text","onCopy","setTimeout","window","open","alt","src","logo","hidden","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"+FAAAA,EAAOC,QAAU,IAA0B,2C,mMCOrCC,EAAsB,WAAYC,KAAKC,UAAUC,aAAgB,UAAWF,KAAKC,UAAUC,WA2DlFC,MAjDf,WAAgB,IAAD,EACeC,oBAAS,GADxB,mBACNC,EADM,KACEC,EADF,KAGPC,EAAU,0GAEhB,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,QACb,kBAAC,kBAAD,CAAiBC,KAAMF,EACrBG,OAAQ,WAENJ,GAAU,GACVK,YAAW,WAAWL,GAAU,KAAO,KAnB7CP,EACFa,OAAOC,KAAK,uDAEZD,OAAOC,KAAK,wHAAyH,SAAU,0BAmBzI,6BACE,6BACE,yBAAKL,UAAU,OAAOM,IAAI,cAAcC,IAAKC,OAE/C,yBAAKR,UAAU,YAAf,gBAEE,4BACE,8FACA,yEACA,4FAEF,yBAAKA,UAAU,cACbS,QAASZ,GADX,YAKF,yBAAKG,UAAU,gBAAgBD,GAE9BR,EACD,yBAAKS,UAAU,kBAAf,+IAGC,KAED,yBAAKA,UAAU,gBAAf,2CC5CQU,QACW,cAA7BN,OAAOO,SAASC,UAEe,UAA7BR,OAAOO,SAASC,UAEhBR,OAAOO,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBxB,WACrBA,UAAUyB,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMzB,c","file":"static/js/main.a0e790b7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/super-tuesday.91094f80.jpg\";","import React, { useState } from 'react';\n// @ts-ignore: No types available\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport './App.css';\nimport logo from './images/super-tuesday.jpg';\n\n\nconst IS_FIREFOX_DESKTOP = (/Firefox/i).test(navigator.userAgent) && !(/mobile/i).test(navigator.userAgent);\n\nfunction openFacebook() {\n  if (IS_FIREFOX_DESKTOP) {\n    window.open('https://www.facebook.com/pg/berniesanders/community');\n  } else {\n    window.open('https://m.facebook.com/nt/?id=%2Fpages%2Fentity%2Fstream%2F%3Fpage_id%3D124955570892789%26fetcher%3Dfriends_who_liked', '_blank', 'width=320,height=480');\n  }\n}\n\nfunction App() {\n  const [copied, setCopied] = useState(false);\n\n  const message = 'Hey, I saw you liked Bernie on Facebook! Have you considered volunteering with him before the election?';\n\n  return (\n    <div className=\"App\">\n      <div className=\"Copy\">\n        <CopyToClipboard text={message}\n          onCopy={() => {\n            // Restart animation.\n            setCopied(false);\n            setTimeout(() => void setCopied(true), 100);\n            openFacebook();\n          }}>\n          <div>\n            <div>\n              <img className=\"Logo\" alt=\"Bernie logo\" src={logo} />\n            </div>\n            <div className=\"Copy-cta\">\n              Instructions:\n              <ul>\n                <li>Click below to open a list of your FB friends who like Bernie.</li>\n                <li>Ask them to volunteer over Facebook chat!</li>\n                <li>(Note) The greeting below will be copied to your clipboard.</li>\n              </ul>\n              <div className=\"Copy-copied\"\n                hidden={!copied}>\n                Copied!\n              </div>\n            </div>\n            <div className=\"Copy-preview\">{message}</div>\n\n            {IS_FIREFOX_DESKTOP ?\n            <div className=\"FirefoxDesktop\">\n              Instructions: Scroll down on the Facebook page to see a list of your friends who liked Bernie's page. Then reach out to them via messenger!\n            </div>\n            :null}\n\n            <div className=\"OpenFacebook\">\n              Message FB friends who like Bernie\n            </div>\n          </div>\n        </CopyToClipboard>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}