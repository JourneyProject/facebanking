{"version":3,"sources":["images/bernie-logo.svg","images/bernie-phone.png","components/Header.tsx","components/Hero.tsx","components/TopCallout.tsx","components/Footer.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Header","Navbar","bg","expand","sticky","Brand","href","src","BernieLogo","alt","className","FACEBANK_DEFAULT_TEXT","Hero","props","containerClassNames","isFirefox","Container","fluid","Row","Col","BerniePhoneImage","text","Card","Body","Button","variant","block","size","onClick","onCtaClick","TopCallout","Footer","role","aria-label","target","rel","analytics","Analytics","app","plugins","googleAnalytics","trackingId","IS_FIREFOX_DESKTOP","test","navigator","userAgent","IS_LOCAL_SERVER","window","location","toString","openFacebook","open","track","App","page","Boolean","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,0C,uMC2B5BC,MAnBf,WACI,OACI,kBAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,KAAKC,OAAO,OAClC,kBAACH,EAAA,EAAOI,MAAR,CAAcC,KAAK,SAEf,yBAAKC,IAAKC,IAAYC,IAAI,cAAcC,UAAU,Y,yECD5DC,EAAwB,4SA2CfC,MAnCf,SAAcC,GACV,IAAIC,EAAsB,eAG1B,OAFID,EAAME,YAAaD,GAAuB,YAG1C,kBAACE,EAAA,EAAD,CAAWC,OAAK,EAACP,UAAWI,GACxB,kBAACI,EAAA,EAAD,CAAKR,UAAU,cACX,kBAACS,EAAA,EAAD,CAAKT,UAAU,yEAAwE,yBAAKH,IAAKa,QAErG,kBAACF,EAAA,EAAD,CAAKR,UAAU,cACX,kBAACS,EAAA,EAAD,CAAKT,UAAU,qIACf,kBAACS,EAAA,EAAD,CAAKT,UAAU,+DACX,oCAAS,2CACT,8OAAmN,gEACnN,gDACA,4BACI,6FACA,wDAA6B,+EAC5BG,EAAME,WAAa,qNAA0L,wEAC9M,4DAAiC,uBAAGL,UAAU,8BAA9C,2BAAsG,2DAAgC,0DAE1I,kBAAC,IAAD,CAAiBW,KAAMV,GACnB,kBAACW,EAAA,EAAD,CAAMZ,UAAU,aACZ,kBAACY,EAAA,EAAKC,KAAN,KAAYZ,KAGpB,kBAAC,IAAD,CAAiBU,KAAMV,GACnB,kBAACa,EAAA,EAAD,CAAQC,QAAQ,SAASC,OAAK,EAACC,KAAK,KAAKjB,UAAU,MAAMkB,QAASf,EAAMgB,YAAY,uBAAGnB,UAAU,8BAAjG,+BC5BToB,MAZf,WACI,OACI,kBAACd,EAAA,EAAD,CAAWC,OAAK,EAACP,UAAU,uBACvB,kBAACQ,EAAA,EAAD,CAAKR,UAAU,cACX,kBAACS,EAAA,EAAD,CAAKT,UAAU,kBACX,+CAAoB,4CAApB,wDCOLqB,MAZf,WACI,OACI,kBAACf,EAAA,EAAD,CAAWC,OAAK,EAACP,UAAU,kBACvB,kBAACQ,EAAA,EAAD,CAAKR,UAAU,cACX,kBAACS,EAAA,EAAD,CAAKT,UAAU,kBACX,wCAAa,0BAAMA,UAAU,QAAQsB,KAAK,MAAMC,aAAW,SAA9C,gBAAb,OAAgF,uBAAG3B,KAAK,oCAAoC4B,OAAO,SAASC,IAAI,uBAAhE,WAAhF,kG,gBCKdC,EAAYC,YAAU,CAC1BC,IAAK,iBACLC,QAAS,CACPC,YAAgB,CACdC,WAAY,sBAKZC,EACJ,WAAWC,KAAKC,UAAUC,aAAe,UAAUF,KAAKC,UAAUC,WAE9DC,EACJ,aAAaH,KAAKI,OAAOC,SAASC,aAAe,aAAaN,KAAKI,OAAOC,SAASC,YAErF,SAASC,IACHR,EACFK,OAAOI,KAAK,uDAEZJ,OAAOI,KACL,wHACA,SACA,wBAGCL,GAAmBV,EAAUgB,MAAM,qBA6C3BC,MA1Cf,WAIE,OAFKP,GAAmBV,EAAUkB,OAGhC,yBAAK5C,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMmB,WAAYqB,EAAcnC,UAAW2B,IAC3C,kBAAC,EAAD,QC1Cca,QACW,cAA7BR,OAAOC,SAASQ,UAEe,UAA7BT,OAAOC,SAASQ,UAEhBT,OAAOC,SAASQ,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBjB,WACrBA,UAAUkB,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.77e22665.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bernie-logo.8532c413.svg\";","module.exports = __webpack_public_path__ + \"static/media/bernie-phone.b889d781.png\";","import React from 'react'\n\n// Bootstrap\nimport Navbar from 'react-bootstrap/Navbar'\n\n// Images\nimport BernieLogo from '../images/bernie-logo.svg'\n\nfunction Header() {\n    return (\n        <Navbar bg=\"white\" expand=\"lg\" sticky=\"top\">\n            <Navbar.Brand href=\"#home\">\n                {/* DMs for */}\n                <img src={BernieLogo} alt=\"Bernie Logo\" className=\"logo\" />\n            </Navbar.Brand>\n            {/* <Nav className=\"ml-auto\">\n                <Nav.Item>\n                    <Nav.Link>What is Facebaking?</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                    <Nav.Link>FAQ</Nav.Link>\n                </Nav.Item>\n            </Nav> */}\n        </Navbar>\n    )\n}\n\nexport default Header\n","import React from 'react'\nimport CopyToClipboard from 'react-copy-to-clipboard';\n\n// Bootstrap\nimport Button from 'react-bootstrap/Button'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Card from 'react-bootstrap/Card'\n\nimport BerniePhoneImage from '../images/bernie-phone.png'\n\nconst FACEBANK_DEFAULT_TEXT = \"Hi! I saw that you liked Bernie's Facebook page. Bernie believes we have a corrupt political and economic system that needs major change. He's running for president to make our economy, our government, and our health care system work for all of us, not just the wealthy few. Are you in for Bernie?\"\n\n\ntype HeroProps = {\n    onCtaClick(): void\n    isFirefox: boolean\n}\n\nfunction Hero(props: HeroProps) {\n    let containerClassNames = \"hero-wrapper\"\n    if (props.isFirefox) { containerClassNames += \" firefox\" }\n\n    return (\n        <Container fluid className={containerClassNames}>\n            <Row className=\"no-gutters\">\n                <Col className=\"bernie-phone-mobile d-xs-show d-sm-show d-md-show d-lg-none d-xl-none\"><img src={BerniePhoneImage}></img></Col>\n            </Row>\n            <Row className=\"no-gutters\">\n                <Col className=\"bernie-phone col-xl-6 col-lg-6 col-md-6 d-none d-xs-none d-sm-none d-md-none d-lg-block d-xl-block bg-img-none-md bg-50 bg-cover\"></Col>\n                <Col className=\"cta-wrapper col-xl-6 col-lg-6 col-md-12 col-xs-12 col-sm-12\">\n                    <h2>DMs. <i>For Bernie.</i></h2>\n                    <p>Phonebanking is awesome. So is textbanking. But what if you want a more direct relationship with the folks you're trying to convince? Facebanking is a way for you to directly message your friends on Facebook <b>who already like Bernie Sanders.</b></p>\n                    <h3>How to Facebank?</h3>\n                    <ol>\n                        <li>Click anywhere on the below text to copy it to your clipboard</li>\n                        <li>Click the big red button <i>(this will open a new window into FB Messenger)</i></li>\n                        {props.isFirefox && <li>In the new window, just click the link below and scroll down on the page that opens. You'll see a list of your friends who have liked Bernie's page. Reach out to them via messenger! <i>(Applicable for Firefox on Desktop Only)</i></li>}\n                        <li>In the new window, click the <i className=\"fab fa-facebook-messenger\"></i> next to a friends name <i>(Remember, these are friends <b>who already like Bernie)</b></i></li>\n                    </ol>\n                    <CopyToClipboard text={FACEBANK_DEFAULT_TEXT}>\n                        <Card className=\"copy-area\">\n                            <Card.Body>{FACEBANK_DEFAULT_TEXT}</Card.Body>\n                        </Card>\n                    </CopyToClipboard>\n                    <CopyToClipboard text={FACEBANK_DEFAULT_TEXT}>\n                        <Button variant=\"danger\" block size=\"lg\" className=\"cta\" onClick={props.onCtaClick}><i className=\"fab fa-facebook-messenger\"></i>&nbsp;&nbsp;Facebank Here!</Button>\n                    </CopyToClipboard>\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n\nexport default Hero\n","import React from 'react'\n\n// Bootstrap\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\nfunction TopCallout() {\n    return (\n        <Container fluid className=\"top-callout-wrapper\">\n            <Row className=\"no-gutters\">\n                <Col className=\"callout col-12\">\n                    <p>Super Tuesday is <i>this Tuesday!</i> Reach out to friends from Super Tuesday states!</p>\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n\nexport default TopCallout\n","import React from 'react'\n\n// Bootstrap\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\nfunction Footer() {\n    return (\n        <Container fluid className=\"footer-wrapper\">\n            <Row className=\"no-gutters\">\n                <Col className=\"callout col-12\">\n                    <p>Made with <span className=\"heart\" role=\"img\" aria-label=\"Heart\">♥️</span> by <a href=\"https://github.com/JourneyProject\" target=\"_blank\" rel=\"noopener noreferrer\">Journey</a> (not affiliated with Bernie 2020)&nbsp;&nbsp;|&nbsp;&nbsp;© 2020 Journey, All rights reserved.</p>\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n\nexport default Footer\n","import React from 'react';\n// @ts-ignore: No types available\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../styles/App.scss'\n\n// Components\nimport Header from './Header'\nimport Hero from './Hero'\nimport TopCallout from './TopCallout'\nimport Footer from './Footer'\n\n\n// @ts-ignore: No types available\nimport Analytics from 'analytics'\n// @ts-ignore: No types available\nimport googleAnalytics from '@analytics/google-analytics'\n\nconst analytics = Analytics({\n  app: 'dms-for-bernie',\n  plugins: [\n    googleAnalytics({\n      trackingId: 'UA-159403078-1'\n    })\n  ]\n})\n\nconst IS_FIREFOX_DESKTOP =\n  /Firefox/i.test(navigator.userAgent) && !/mobile/i.test(navigator.userAgent);\n\nconst IS_LOCAL_SERVER =\n  /localhost/i.test(window.location.toString()) || /127.0.0.1/i.test(window.location.toString());\n\nfunction openFacebook() {\n  if (IS_FIREFOX_DESKTOP) {\n    window.open('https://www.facebook.com/pg/berniesanders/community');\n  } else {\n    window.open(\n      'https://m.facebook.com/nt/?id=%2Fpages%2Fentity%2Fstream%2F%3Fpage_id%3D124955570892789%26fetcher%3Dfriends_who_liked',\n      '_blank',\n      'width=320,height=480'\n    );\n  }\n  if (!IS_LOCAL_SERVER) { analytics.track('dm-button-clicked') }\n}\n\nfunction App() {\n  // Track this in GA in prod only so we have a general idea of usage\n  if (!IS_LOCAL_SERVER) { analytics.page() }\n\n  return (\n    <div className='App'>\n      <Header></Header>\n      <TopCallout></TopCallout>\n      <Hero onCtaClick={openFacebook} isFirefox={IS_FIREFOX_DESKTOP}></Hero>\n      <Footer></Footer>\n      {/* <Container>\n        <div className='OpenFacebook float-right' onClick={openFacebook}>\n          Send DMs on Facebook\n        </div>\n\n        <div className='Instructions'>\n          <strong>Instructions:</strong>\n          <ul>\n            <li>1) Click the \"Send DMs on Facebook\" button</li>\n            <li>2) Choose a friend (Note: They all like Bernie)</li>\n            <li>\n              3) Click the{' '}\n              <img className='Instructions-messenger' alt=\"Facebook Messenger icon\" src={MessengerImage} />{' '}\n              button next to their name\n            </li>\n            <li>4) Ask your friend to commit to voting</li>\n            <li>5) Ask your friend to volunteer</li>\n            <li>6) Thank your friend</li>\n            <li>7) Return to step 2</li>\n          </ul>\n        </div>\n\n        <div className='OpenFacebook float-left' onClick={openFacebook}>\n          Send DMs on Facebook\n        </div>\n\n        <div className='clear-both'></div>\n      </Container> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}